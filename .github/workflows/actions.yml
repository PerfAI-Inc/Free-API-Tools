name: Deploying Governance-AI in Cloud RUN

on: 
  push:
    branches: ['main']

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  PROD_PROJECT: ${{ secrets.PROD_PROJECT }}
  REPOSITORY: governance-ai                         # Add your repository name here.
  GAR_LOCATION: us-south1                    # Add your repository region name here.
  IMAGE: governance-ai                               # Add your image name here.
  IMAGE_TAG: $(date "+%F-%H%M")              # Add your image date-tag name here.
  
  GCR_SERVICE: governance-ai                         # Add your cloud run service name here.
  GCR_REGION: us-west1                      # Add your cloud run region name here.

  GKE_CLUSTER: us-cluster1                      # Add your cluster name here.
  GKE_ZONE: us-central1-c                       # Add your cluster zone here.
  

jobs:
 Deploy-Developer:
    runs-on: ubuntu-latest

      permissions:
        contents: 'read'
        id-token: 'write'
   
      steps:
      - name: Checkout
        uses: actions/checkout@v4

### Authentication via credentials json ###
      - name: 'Authenticate to Google Cloud'
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'  

### Set up Cloud SDK ###
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: '${{ env.PROJECT_ID }}'    

### Docker Authenticating ###        
      - name: 'Docker Auth'
        run: |-
          gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev
            
### Docker Image Date-Tag ###        
      - name: 'Setting image date-tag'
        run: |-
           image_tag=$IMAGE_TAG
           echo $image_tag
      
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date '+%F-%H%M')"
      
### Build and Push the Docker image to Google Artifact Registry (GAR) ###
      - name: Build and Push to Google Artifact Registry
        env:
            TAG_NAME: ${{ steps.date.outputs.date }}
        run: |-
          docker build -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }} . 
          docker tag ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }} ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ steps.date.outputs.date }}                                                                                    
          docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ steps.date.outputs.date }}
          
### Get the Deploying Container to Gooogle Cloud RUN ###
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.GCR_SERVICE }} \
             --image ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ steps.date.outputs.date }} \
             --region ${{ env.GCR_REGION }} \
             --platform managed \
             --allow-unauthenticated \
             --port=3000 \
             --timeout=3600 \
             --update-labels commit-sha=${{ github.sha }}
             
      - name: 'Show output'
        run: echo ${{ steps.deploy.outputs.url }}   

############### PRODUCTION ENV ################
  Deploy-Production:
    runs-on: ubuntu-latest
    needs: Deploy-Developer
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

### Authentication via credentials json ###
    - name: 'Authenticate to Google Cloud'
      id: 'auth'
      uses: 'google-github-actions/auth@v2'
      with:
          credentials_json: '${{ secrets.PROD_CREDENTIALS }}'  

### Set up Cloud SDK ###
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
          project_id: '${{ env.PROD_PROJECT }}'    

### Docker Authenticating ###        
    - name: 'Docker Auth'
      run: |-
          gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

## Docker Image Date-Tag ###        
    - name: 'Setting image date-tag'
      run: |-
           image_tag=$IMAGE_TAG
           echo $image_tag
      
    - name: Get current date
      id: date
      run: echo "::set-output name=date::$(date '+%F-%H%M')"

### Build and Push the Docker image to Google Artifact Registry (GAR) ###
    - name: Build and Push to Google Artifact Registry
      env:
           TAG_NAME: ${{ steps.date.outputs.date }}
      run: |-
          docker build -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROD_PROJECT }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }} .
          docker tag ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROD_PROJECT }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }} ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROD_PROJECT }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ steps.date.outputs.date }}                                                                                               
          docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROD_PROJECT }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ steps.date.outputs.date }}
          
### Get the Deploying Container to Gooogle Cloud RUN ###
    - name: Deploy to Cloud Run
      run: |
           gcloud run deploy ${{ env.GCR_SERVICE }} \
             --image ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROD_PROJECT }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ steps.date.outputs.date }} \
             --region us-west1 \
             --platform managed \
             --allow-unauthenticated \
             --port=3000 \
             --timeout=3600 \
             --update-labels commit-sha=${{ github.sha }}

    - name: 'Show output'
      run: echo ${{ steps.deploy.outputs.url }} 

      
### Email Alert Notifcation ###
    - name: Send mail
      if: failure()
      uses: dawidd6/action-send-mail@v3.9.0
      with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: Build fail
          body: Have a look at fail job https://github.com/PerfAI-Inc/WebApp-API/actions
         # to: rashid@perfai.ai
          to: intesar@perfai.ai,ahmed@perfai.ai,rashid@perfai.ai,ahsan.nadeem@tekrowe.com,arsalankhan013@gmail.com,mdafroze05@gmail.com,usman.sajid@tekrowe.com,yobeid2002@gmail.com,hajera.laique@gmail.com,maad.ali@tekrowe.com
          from: PerfAI    
